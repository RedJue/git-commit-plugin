import { workspace, QuickPickItem } from 'vscode';

/**
 * @description git commit Êèê‰∫§Á±ªÂûã
 */
export interface CommitType extends QuickPickItem {
    icon: string;
}

//Êñ∞Â¢ûÁöÑËá™ÂÆö‰πâcommit type add custom Commit Type
const CustomCommitType = workspace.getConfiguration('GitCommitPlugin').get<boolean>('CustomCommitType');
let CommitType: Array<CommitType> = [
    {
        label: 'feat',
        detail: 'Ê∑ªÂä†Êñ∞ÁâπÊÄß',
        icon:'‚ú®'
    },
    {
        label: 'fix',
        detail: '‰øÆÂ§çbug',
        icon:'üêû'
    },
    {
        label: 'docs',
        detail: '‰ªÖ‰ªÖ‰øÆÊîπÊñáÊ°£',
        icon:'üìÉ'
    },
    {
        label: 'style',
        detail: '‰ªÖ‰ªÖ‰øÆÊîπ‰∫ÜÁ©∫Ê†º„ÄÅÊ†ºÂºèÁº©Ëøõ„ÄÅÈÄóÂè∑Á≠âÁ≠âÔºå‰∏çÊîπÂèò‰ª£Á†ÅÈÄªËæë',
        icon:'üåà'
    },
    {
        label: 'refactor',
        detail: '‰ª£Á†ÅÈáçÊûÑÔºåÊ≤°ÊúâÂä†Êñ∞ÂäüËÉΩÊàñËÄÖ‰øÆÂ§çbug',
        icon:'ü¶Ñ'
    },
    {
        label: 'perf',
        detail: '‰ºòÂåñÁõ∏ÂÖ≥ÔºåÊØîÂ¶ÇÊèêÂçáÊÄßËÉΩ„ÄÅ‰ΩìÈ™å',
        icon:'üéà'
    },
    {
        label: 'test',
        detail: 'Â¢ûÂä†ÊµãËØïÁî®‰æã',
        icon:'üß™'
    },
    {
        label: ' build',
        detail: '‰æùËµñÁõ∏ÂÖ≥ÁöÑÂÜÖÂÆπ',
        icon:'üîß'
    },
    {
        label: 'ci',
        detail: 'ciÈÖçÁΩÆÁõ∏ÂÖ≥ ‰æãÂ¶ÇÂØπ k8sÔºådockerÁöÑÈÖçÁΩÆÊñá‰ª∂ÁöÑ‰øÆÊîπ',
        icon:'üêé'
    },
    {
        label: 'chore',
        detail: 'ÊîπÂèòÊûÑÂª∫ÊµÅÁ®ã„ÄÅÊàñËÄÖÂ¢ûÂä†‰æùËµñÂ∫ì„ÄÅÂ∑•ÂÖ∑Á≠â',
        icon:'üê≥'
    },
    {
        label: '‚Ü©revert',
        detail: 'ÂõûÊªöÂà∞‰∏ä‰∏Ä‰∏™ÁâàÊú¨',
        icon:''
    }
];

// if (!isShowEmoji) {
//     CommitType = CommitType.map((commitType) => {
//         const labelArr = [...commitType.label];
//         labelArr.shift();
//         commitType.label = labelArr.join('').trim();
//         return commitType;
//     });
// }
if (Array.isArray(CustomCommitType)) {
    const costom_commit_type: Array<CommitType> = CustomCommitType.map((item, index) => {
        let label = '',icon='',detail = '';
        if (typeof item === 'string') {
            label = detail = item;
        }
        if (Object.prototype.toString.call(item) === '[object Object]') {
            Reflect.has(item, 'label') && (label = item.label);
            Reflect.has(item, 'detail') && (detail = item.detail);
            Reflect.has(item, 'icon') && (icon = item.icon);
        }
        return {
            label,
            detail,
            icon
        };
    });
    CommitType = costom_commit_type.concat(CommitType);
}
export default CommitType;
